#!/usr/bin/env bash

##
## set up year for a language
##

usage() {
    local exitcode=${1:-1}

    langs=()
    while IFS= read -r -d '' filename; do
        langs+=("$(basename "$(dirname "${filename}")")")
    done < <(find lang -type f -name 'Dockerfile' -print0 | sort -z)

    echo "usage: aoc-init -l <language> [ -y <year> ] [ -t <tag> ]"
    echo "       aoc-init [ -y <year> ] [ -t <tag> ] <language>"
    echo ""
    echo "Sets up a new AoC environment."
    echo ""
    echo "Options:"
    echo "* -l -- language"
    echo "* -y -- year (defaults to current year)"
    echo "* -t -- tag for language Docker image (defaults to 'latest')"
    echo ""
    echo "<language> must be one of: " "${langs[@]}"

    exit "${exitcode}"
}

while getopts ":hl:t:y:" opt; do
    case ${opt} in
        h) # help
            usage 0
            ;;

        l) # lang
            AOC_LANG=${OPTARG}
            ;;

        t) # tag for lang image
            AOC_TAG=${OPTARG}
            ;;

        y) # year
            AOC_YEAR=${OPTARG}
            ;;

        \?)
            echo "invalid option -${OPTARG}" 1>&2
            usage
            ;;

        :)
            echo "option ${OPTARG} requires an argument" 1>&2
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

# for Linux? CURRENT_YEAR=$(date --iso-8601 | cut -d '-' -f 1)
CURRENT_YEAR=$(date -I | cut -d '-' -f 1)

AOC_LANG=${AOC_LANG:-$1}
AOC_TAG=${AOC_TAG:-latest}
AOC_YEAR=${AOC_YEAR:-${CURRENT_YEAR}}

if [[ -z "${AOC_LANG}" ]]; then
    usage
elif [[ ! -d "lang/${AOC_LANG}" ]]; then
    echo "unknown language ${AOC_LANG}"
    usage
fi

if [[ -z "${AOC_YEAR}" ]]; then
    usage
elif ((AOC_YEAR < 2015 || AOC_YEAR > CURRENT_YEAR)); then
    echo "year out of range"
    usage
fi

##
## language-agnostic year initialization
##

[[ ! -e "years/${AOC_YEAR}/solutions.json" ]] && cat << EOT > "years/${AOC_YEAR}/solutions.json"
{
    "day_01": [],
    "day_02": [],
    "day_03": [],
    "day_04": [],
    "day_05": [],
    "day_06": [],
    "day_07": [],
    "day_08": [],
    "day_09": [],
    "day_10": [],
    "day_11": [],
    "day_12": [],
    "day_13": [],
    "day_14": [],
    "day_15": [],
    "day_16": [],
    "day_17": [],
    "day_18": [],
    "day_19": [],
    "day_20": [],
    "day_21": [],
    "day_22": [],
    "day_23": [],
    "day_24": [],
    "day_25": []
}
EOT
mkdir -pv "years/${AOC_YEAR}/data"

##
## initialization that can take place outside the container
##

mkdir -pv "years/${AOC_YEAR}/${AOC_LANG}"
unset AOC_INITIALIZED

if [[ -x "lang/${AOC_LANG}/aoc-init" ]]; then
    "lang/${AOC_LANG}/aoc-init" -y "${AOC_YEAR}" -t "${AOC_TAG}"
else
    # shellcheck source=/dev/null
    if [[ -r "lang/${AOC_LANG}/.aocrc" ]]; then
        source "lang/${AOC_LANG}/.aocrc"
        if [[ $(LC_ALL=C type -t already_initialized) == function ]]; then
            if already_initialized; then
                echo "${AOC_LANG} directory already exists in years/${AOC_YEAR}"
                AOC_INITIALIZED=true
            fi
        fi
    fi

    if [[ -z "${AOC_INITIALIZED}" ]]; then
        if [[ -d "lang/${AOC_LANG}/skeleton" ]]; then
            cp -npRv "lang/${AOC_LANG}/skeleton/." "years/${AOC_YEAR}/${AOC_LANG}"
        fi
    fi

    CONTAINER_NAME="aoc-${AOC_LANG}${AOC_YEAR:+-${AOC_YEAR}}"

    ## now run initialization inside the container

    # shellcheck disable=SC2086
    docker run \
        --interactive \
        --mount type=bind,src="./years/${AOC_YEAR}/${AOC_LANG}",dst=/aoc/src \
        --mount type=bind,src="./years/${AOC_YEAR}/data",dst=/aoc/data \
        ${ADDITIONAL_MOUNTS} \
        --name "${CONTAINER_NAME}" \
        --rm \
        --tty \
        ${ADDITIONAL_FLAGS} \
        "ghcr.io/krisalyssa/aoc/aoc-${AOC_LANG}:${AOC_TAG}" \
        -c "bin/init"
fi
