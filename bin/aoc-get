#!env bash

CURRENT_YEAR=$(date --iso-8601 | cut -d '-' -f 1)
DRY_RUN=
FORCE=
# SESSION_TOKEN=
VERBOSE=0

[[ -z SESSION_TOKEN && -r ./.token ]] && SESSION_TOKEN=$(cat ./.token)

data_filename() {
  local year=$1 day=$2

  echo $(printf "years/%s/data/%02d.txt" "$year" "$day")
}

fetch() {
  local year=$1 day=$2
  local fn=$(data_filename $year $day)
  local outfile=$(mktemp)
  local status_code
  local url="https://adventofcode.com/${year}/day/${day}/input"

  if [[ -n "${DRY_RUN}" ]]; then
    echo "curl --request GET --cookie \"session=***\" --location --output \"${fn}\" --show-error --silent --write-out \"%{http_code}\" --url \"https://adventofcode.com/${year}/day/${day}/input\""
  else
    status_code=$(
      curl \
        --request GET \
        --cookie "session=${SESSION_TOKEN}" \
        --location \
        --output "${outfile}" \
        --show-error \
        --silent \
        --write-out "%{http_code}" \
        --url "https://adventofcode.com/${year}/day/${day}/input"
    )

    case "${status_code}" in
    "200")
      mkdir -p "$(dirname $fn)"
      mv "${outfile}" "${fn}"
      ;;

    "400")
      echo "session-token is not valid -- log in again to refresh it"
      rm ${outfile}
      exit 1
      ;;

    "404")
      # 404 is expected if it's the current year and a future day
      echo "data not found at ${url}"
      rm ${outfile}
      exit 1
      ;;

    *)
      echo "could not fetch data for ${year} day ${day}: HTTP status code ${status_code}"
      exit 1
      ;;
    esac
  fi
}

get_all_data() {
  for year in {2015..2022}; do
    get_year_data ${year}
  done
}

get_data() {
  local year=$1
  local day=$2

  if [[ -z ${year} ]]; then
    get_all_data
  elif [[ -z ${day} ]]; then
    get_year_data ${year}
  else
    get_day_data ${year} ${day}
  fi
}

get_day_data() {
  local year=$1 day=$2

  verbose_gt 1 "getting data for year ${year} day ${day}"
  maybe_fetch $1 $2
}

get_year_data() {
  local year=$1

  for day in {1..25}; do
    get_day_data ${year} ${day}
  done
}

maybe_fetch() {
  local year=$1 day=$2
  local fn=$(data_filename $year $day)

  if [[ ! -f "$fn" || ${FORCE} ]]; then
    fetch $year $day
  else
    verbose "data for ${year} day ${day} has already been fetched; skipping"
  fi
}

usage() {
  echo "Usage: aoc-get [-f] [-n] [-q] [-v] [year [day]]"
  echo "       aoc-get -h"
  echo ""
  echo "If day is omitted, will get data for all days for the year."
  echo "If year is omitted, will get data for all years since and including 2015."
  echo ""
  echo "Options:"
  echo "  -f   force download of data even if the file exists locally"
  echo "  -h   show this help"
  echo "  -n   show what will be executed, but don't actually execute it"
  echo "  -q   decrease verbosity of output"
  echo "  -v   increase verbosity of output"
  exit 1
}

verbose() {
  verbose_gt 0 $@
}

verbose_gt() {
  local level=$1
  shift
  [[ ${VERBOSE} > ${level} ]] && echo $@
}

while getopts ":fhnqv" opt; do
  case ${opt} in
  f) # force
    FORCE=true
    ;;

  h) # help
    usage
    ;;

  n) # dry run
    DRY_RUN=true
    ;;

  q) # quiet
    VERBOSE=$((VERBOSE - 1))
    if [[ ${VERBOSE} < 0 ]]; then
      VERBOSE=0
    fi
    ;;

  v) # verbose
    VERBOSE=$((VERBOSE + 1))
    ;;

  \?)
    echo "invalid option -${OPTARG}" 1>&2
    usage
    ;;

  :)
    echo "option ${OPTARG} requires an argument" 1>&2
    usage
    ;;
  esac
done
shift $((OPTIND - 1))

YEAR=$1
DAY=$2

get_data ${YEAR} ${DAY}
