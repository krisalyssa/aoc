#!/usr/bin/env bash

##
## pull data
##

usage() {
    local exitcode=${1:-1}

    echo "usage: aoc-get [ -y <year> [ -d <day> ] ] [ -n ] [ -f ] [ -v ] [ -q ]"
    echo ""
    echo "Gets data files."
    echo ""
    echo "Options:"
    echo "* -y -- year, or 'all' (defaults to current year)"
    echo "* -d -- day, or 'all' (defaults to current day)"
    echo "* -n -- dry run (show, don't do)"
    echo "* -f -- force (download a data file even if it exists locally)"
    echo "* -v -- increase verbosity"
    echo "* -q -- decrease verbosity"

    exit "${exitcode}"
}

AOC_DAY=
AOC_YEAR=
DRY_RUN=
FORCE=
SESSION_TOKEN=
VERBOSE=1

while getopts ":d:fhnqvy:" opt; do
    case ${opt} in
        d) # day
            AOC_DAY=${OPTARG}
            ;;

        f) # force
            FORCE=true
            ;;

        h) # help
            usage 0
            ;;

        n) # dry run
            DRY_RUN=true
            ;;

        q) # quiet
            VERBOSE=0
            ;;

        v) # verbose
            VERBOSE=$((VERBOSE + 1))
            ;;

        y) # year
            AOC_YEAR=${OPTARG}
            ;;

        \?)
            echo "invalid option -${OPTARG}" 1>&2
            usage
            ;;

        :)
            echo "option ${OPTARG} requires an argument" 1>&2
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

# for Linux? CURRENT_YEAR=$(date --iso-8601 | cut -d '-' -f 1)
CURRENT_YEAR=$(date -I | cut -d '-' -f 1)
# for Linux? CURRENT_DAY=$(date --iso-8601 | cut -d '-' -f 3)
CURRENT_DAY=$(date -I | cut -d '-' -f 3)

export AOC_YEAR=${AOC_YEAR:-${CURRENT_YEAR}}
export AOC_DAY=${AOC_DAY:-${CURRENT_DAY}}

if [[ -z "${AOC_YEAR}" ]]; then
    usage
elif ((AOC_YEAR < 2015 || AOC_YEAR > CURRENT_YEAR)); then
    echo "year out of range"
    usage
fi

if [[ -z "${AOC_DAY}" ]]; then
    usage
elif [[ "${AOC_DAY}" != "all" ]]; then
    # strip leading zero, if any, for proper numeric comparisons
    [[ -n "${AOC_DAY}" ]] && AOC_DAY=$((AOC_DAY + 0))

    if ((AOC_DAY < 1 || AOC_DAY > 25)); then
        echo "day out of range"
        usage
    elif ((AOC_YEAR == CURRENT_YEAR && AOC_DAY > CURRENT_DAY)); then
        echo "day ${AOC_DAY} hasn't been released yet"
        usage
    fi
fi

[[ -z "${SESSION_TOKEN}" && -r ./.token ]] && SESSION_TOKEN=$(cat ./.token)
if [[ -z "${SESSION_TOKEN}" ]]; then
    echo "cannot find session token -- are you logged in?"
    usage
fi

data_filename() {
    local year=$1 day=$2
    printf "years/%s/data/%02d.txt" "$year" "$day"
}

data_url() {
    local year=$1 day=$2
    local stripped_day=$((day + 0))
    echo "https://adventofcode.com/${year}/day/${stripped_day}/input"
}

fetch() {
    local year=$1 day=$2
    local fn outfile status_code url

    fn=$(data_filename "${year}" "${day}")
    outfile=$(mktemp)
    url=$(data_url "${year}" "${day}")

    if [[ -n "${DRY_RUN}" ]]; then
        echo "curl --request GET --cookie \"session=***\" --location --output \"${fn}\" --show-error --silent --write-out \"%{http_code}\" --url \"${url}\""
    else
        status_code=$(
            curl \
                --request GET \
                --cookie "session=${SESSION_TOKEN}" \
                --location \
                --output "${outfile}" \
                --show-error \
                --silent \
                --write-out "%{http_code}" \
                --url "${url}"
        )

        case "${status_code}" in
            "200")
                mkdir -p "$(dirname "${fn}")"
                mv "${outfile}" "${fn}"
                ;;

            "400")
                echo "session token is not valid -- log in again to refresh it"
                rm "${outfile}"
                exit 1
                ;;

            "404")
                # 404 is expected if it's the current year and a future day
                echo "data not found at ${url}"
                rm "${outfile}"
                exit 1
                ;;

            *)
                echo "could not fetch data for ${year} day ${day}: HTTP status code ${status_code}"
                exit 1
                ;;
        esac
    fi
}

get_all_data() {
    for year in $(eval echo "{2015..${CURRENT_YEAR}}"); do
        get_year_data "${year}"
    done
}

get_data() {
    local year=$1
    local day=$2

    [[ -z "${year}" ]] && year=${CURRENT_YEAR}
    [[ -z "${day}" ]] && day=${CURRENT_DAY}

    if [[ "${year}" == "all" ]]; then
        get_all_data
    elif [[ "${day}" == "all" ]]; then
        get_year_data "${year}"
    else
        get_day_data "${year}" "${day}"
    fi
}

get_day_data() {
    local year=$1 day=$2

    # verbose_gt 1 "getting data for year ${year} day ${day}"
    maybe_fetch "$1" "$2"
}

get_year_data() {
    local year=$1 last_day=25
    local day

    [[ "${year}" == "${CURRENT_YEAR}" ]] && last_day="${CURRENT_DAY}"

    stripped_last_day=$((last_day + 0))

    for day in $(eval echo "{1..${stripped_last_day}}"); do
        get_day_data "${year}" "${day}"
    done
}

maybe_fetch() {
    local year=$1 day=$2
    local fn

    fn=$(data_filename "${year}" "${day}")

    echo -n "${year} day ${day}..."

    if [[ ! -f "$fn" || ${FORCE} ]]; then
        fetch "${year}" "${day}"
        echo " done."
    else
        # verbose "data for ${year} day ${day} has already been fetched; skipping"
        echo " already downloaded, skipping"
    fi
}

verbose() {
    verbose_gt 0 "$*"
}

verbose_gt() {
    local level=$1
    shift
    [[ ${VERBOSE} -gt ${level} ]] && echo "$*"
}

get_data "${AOC_YEAR}" "${AOC_DAY}"
