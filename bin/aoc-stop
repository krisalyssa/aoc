#!/usr/bin/env bash

##
## stop a container for a language
##

usage() {
    local exitcode=${1:-1}

    langs=()
    # shellcheck disable=SC2312
    while IFS= read -r -d '' filename; do
        langs+=("$(basename "$(dirname "${filename}")")")
    done < <(find lang -type f -name 'Dockerfile' -print0 | sort -z)

    echo "usage: aoc-stop -l <language> [ -y <year> ]"
    echo "       aoc-stop [ -y <year> ] <language>"
    echo ""
    echo "Starts a Docker container for the language, with data files mounted."
    echo ""
    echo "Options:"
    echo "* -l -- language"
    echo "* -y -- year (defaults to current year)"
    echo ""
    echo "<language> must be one of: " "${langs[@]}"

    exit "${exitcode}"
}

while getopts ":dhl:t:y:" opt; do
    case ${opt} in
        h) # help
            usage 0
            ;;

        l) # lang
            AOC_LANG=${OPTARG}
            ;;

        y) # year
            AOC_YEAR=${OPTARG}
            ;;

        \?)
            echo "invalid option -${OPTARG}" 1>&2
            usage
            ;;

        :)
            echo "option ${OPTARG} requires an argument" 1>&2
            usage
            ;;

        *) ;;
    esac
done
shift $((OPTIND - 1))

# for Linux? CURRENT_YEAR=$(date --iso-8601 | cut -d '-' -f 1)
# shellcheck disable=SC2312
CURRENT_YEAR=$(date -I | cut -d '-' -f 1)

export AOC_LANG=${AOC_LANG:-$1}
export AOC_YEAR=${AOC_YEAR:-${CURRENT_YEAR}}

if [[ -z "${AOC_LANG}" ]]; then
    usage
elif [[ ! -d "lang/${AOC_LANG}" ]]; then
    echo "unknown language ${AOC_LANG}"
    usage
fi

if [[ -z "${AOC_YEAR}" ]]; then
    usage
elif ((AOC_YEAR < 2015 || AOC_YEAR > CURRENT_YEAR)); then
    echo "year out of range"
    usage
fi

if [[ -x "lang/${AOC_LANG}/aoc-stop" ]]; then
    "lang/${AOC_LANG}/aoc-stop" -y "${AOC_YEAR}"
else
    # shellcheck source=/dev/null
    [[ -r "lang/${AOC_LANG}/.aocrc" ]] && source "lang/${AOC_LANG}/.aocrc"

    CONTAINER_NAME="aoc-${AOC_LANG}${AOC_YEAR:+-${AOC_YEAR}}"

    # shellcheck disable=SC2312
    if [[ "$(docker ps --all --format json | jq -r '.Names')" == "${CONTAINER_NAME}" ]]; then
        case $(docker ps --all --format json | jq -r --arg name "${CONTAINER_NAME}" 'select(.Names == $name) | .State') in
            running)
                # echo "container is already running"
                docker stop "${CONTAINER_NAME}" > /dev/null
                docker rm "${CONTAINER_NAME}" > /dev/null
                ;;

            exited)
                docker rm "${CONTAINER_NAME}"
                ;;

            *) ;;
        esac
    fi
fi
