name: build-images
run-name: build docker images
on:
  pull_request:
    paths:
      - lang/**/Dockerfile
  push:
    branches: [main]
    paths:
      - lang/**/Dockerfile
  workflow_dispatch:
    inputs:
      languages:
        description: A comma- or space-separated list of languages to build. If omitted, build all languages.
        required: false
        type: string
      release:
        description: If checked, create a release.
        required: false
        type: boolean
        default: false
jobs:
  setup:
    name: set up context
    runs-on: ubuntu-latest
    outputs:
      langs: ${{ steps.vars.outputs.langs }}
    steps:
      - name: check out code
        uses: actions/checkout@v4

      # - name: get changed files
      #   id: files
      #   uses: tj-actions/changed-files@v45
      #   with:
      #     since_last_remote_commit: true

      - name: set variables
        id: vars
        shell: bash
        run: |
          langs=()

          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.languages }}" ]]; then
            languages=$( echo "${{ github.event.inputs.languages }}" | sed -e 's/,/ /g' )
            for lang in $( echo ${languages} ); do
              langs+=(${lang})
            done
          else
            for filename in $( find lang -type f -name 'Dockerfile' ); do
              langs+=("$( basename $( dirname ${filename} ) )")
            done
          fi
          echo "langs=$( jq --compact-output --null-input '$ARGS.positional' --args -- "${langs[@]}" )" >> "$GITHUB_OUTPUT"

      - name: log variables
        shell: bash
        run: |
          echo "langs=${{ steps.vars.outputs.langs }}"

  build:
    name: build images
    needs: [setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lang: ${{ fromJSON(needs.setup.outputs.langs) }}
    steps:
      - name: check out code
        uses: actions/checkout@v4

      - name: set variables
        id: vars
        shell: bash
        run: |
          cd lang/${{ matrix.lang }}

          name="aoc-${{ matrix.lang }}"
          echo "name=${name}" >> "${GITHUB_OUTPUT}"

          image="ghcr.io/${{ github.repository }}/${name}"
          echo "image=${image}" >> "${GITHUB_OUTPUT}"

          short_sha="$( git rev-parse --short HEAD )"
          echo "short-sha=${short_sha}" >> "${GITHUB_OUTPUT}"

          version=$( grep "LABEL version=" Dockerfile | sed -e 's/LABEL version="\(.*\)"/\1/' -e 's/ //g' )
          if [[ -z "${version// }" ]]; then
             echo - Failed to get version. Be sure you have a label named "version" in your Dockerfile.
             exit 1
          fi
          echo "version=${version}" >> "${GITHUB_OUTPUT}"

          tags=()
          if [[ ( "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ) ||
                ( "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.release }}" == "true" ) ]] ; then
            release="true"
            tags+=("${image}:${version}")
            tags+=("${image}:latest")
          else
            release="false"
            tags+=("${image}:${short_sha}")
          fi
          echo "release=${release}" >> "${GITHUB_OUTPUT}"
          echo "tags=$( jq --compact-output --null-input '$ARGS.positional' --args -- "${tags[@]}" )" >> "$GITHUB_OUTPUT"

      - name: log variables
        shell: bash
        run: |
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.ref:        ${{ github.ref }}"
          echo ""
          echo "name:              ${{ steps.vars.outputs.name }}"
          echo "image:             ${{ steps.vars.outputs.image }}"
          echo "release:           ${{ steps.vars.outputs.release }}"
          echo "short-sha:         ${{ steps.vars.outputs.short-sha }}"
          echo "tags:              ${{ steps.vars.outputs.tags }}"
          echo "version:           ${{ steps.vars.outputs.version }}"

      - name: set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: cache docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and push image
        uses: docker/build-push-action@v6
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          context: lang/${{ matrix.lang }}
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: ${{ join(fromJSON(steps.vars.outputs.tags), ',') }}

      - name: create release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          # artifactErrorsFailBuild:
          # artifacts:
          # artifactContentType:
          body: "`docker pull ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.version }}`"
          # bodyFile:
          # commit:
          # discussionCategory:
          draft: ${{ steps.vars.outputs.release != 'true' }}
          # generateReleaseNotes:
          # makeLatest:
          name: "${{ steps.vars.outputs.name }}:${{ steps.vars.outputs.version }}"
          # omitBody:
          # omitBodyDuringUpdate:
          # omitDraftDuringUpdate:
          # omitName:
          # omitNameDuringUpdate:
          # omitPrereleaseDuringUpdate:
          # owner:
          prerelease: false
          # removeArtifacts:
          # replacesArtifacts:
          # repo:
          skipIfReleaseExists: true
          tag: "${{ steps.vars.outputs.name }}-${{ steps.vars.outputs.version }}"
          # token:
          updateOnlyUnreleased: true

      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: replace cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache